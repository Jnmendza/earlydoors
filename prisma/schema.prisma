generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model SupportersGroup {
  id             String   @id(map: "supporters_group_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at     DateTime @default(now()) @db.Timestamptz(6)
  club_id        String   @db.Uuid
  name           String
  group_logo_url String?  @default("")
  city           String
  description    String
  website_url    String?  @default("")
  ig_handle      String?  @default("")
  state          String
  status         Status?  @default(PENDING)
  club           Club     @relation(fields: [club_id], references: [id], onDelete: NoAction, onUpdate: Restrict, map: "supporters_group_club_id_fkey")
  event          Event[]

  @@index([club_id])
}

model Venue {
  id                  String               @id(map: "venues_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at          DateTime             @default(now()) @db.Timestamptz(6)
  name                String
  address             String
  city                String
  lat                 Float
  lng                 Float
  website_url         String
  google_maps_url     String
  logo_url            String?              @default("")
  is_active           Boolean
  has_garden          Boolean              @default(false)
  has_big_screen      Boolean              @default(false)
  has_outdoor_screens Boolean              @default(false)
  is_bookable         Boolean              @default(false)
  zipcode             String
  state               String
  status              Status?              @default(PENDING)
  events              Event[]              @relation("VenueEvents")
  club_affiliates     VenueClubAffiliate[]

  @@index([name])
}

model Event {
  id                  String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at          DateTime         @default(now()) @db.Timestamptz(6)
  name                String
  description         String
  start_time          String
  end_time            String?
  venue_id            String           @db.Uuid
  club_id             String?          @db.Uuid
  supporters_group_id String?          @db.Uuid
  is_watch_party      Boolean          @default(false)
  has_garden          Boolean          @default(false)
  has_big_screen      Boolean          @default(false)
  has_outdoor_screens Boolean          @default(false)
  is_bookable         Boolean          @default(false)
  status              Status?          @default(PENDING)
  date                DateTime         @db.Date
  supportersGroup     SupportersGroup? @relation(fields: [supporters_group_id], references: [id])
  club                Club?            @relation(fields: [club_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Event_club_id_fkey")
  venue               Venue            @relation("VenueEvents", fields: [venue_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([club_id])
  @@index([supporters_group_id])
  @@index([venue_id])
}

model Club {
  id                String                   @id(map: "clubs_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at        DateTime                 @default(now()) @db.Timestamptz(6)
  name              String
  logo_url          String?                  @default("")
  league            String
  country           String
  status            Status?                  @default(PENDING)
  event             Event[]
  supportersGroup   SupportersGroup[]
  search_vector     Unsupported("tsvector")?
  venues_affiliates VenueClubAffiliate[]

  @@index([name])
}

model VenueClubAffiliate {
  id         String    @id @default(uuid()) @db.Uuid
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  venueId    String    @db.Uuid
  clubId     String    @db.Uuid

  venue Venue @relation(fields: [venueId], references: [id])
  club  Club  @relation(fields: [clubId], references: [id])

  @@unique([venueId, clubId])
}


model ActivityLog {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at    DateTime     @default(now()) @db.Timestamptz(6)
  type          ActivityType
  action        String
  referenced_id String
  message       String
}

enum ActivityType {
  SUPPORTERS_GROUP
  CLUB
  VENUE
  EVENT
}

enum Status {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}
